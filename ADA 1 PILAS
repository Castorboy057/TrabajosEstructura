class Pila:
    def __init__(self):
        self.items = []

    def esta_vacia(self):
        return self.items == []

    def apilar(self, item):
        self.items.append(item)

    def desapilar(self):
        return self.items.pop()


def hanoi(n, origen, auxiliar, destino):
    if n == 1:
        destino.apilar(origen.desapilar())
        print("Mueve un disco de", origen, "a", destino)
    else:
        hanoi(n-1, origen, destino, auxiliar)
        destino.apilar(origen.desapilar())
        print("Mueve un disco de", origen, "a", destino)
        hanoi(n-1, auxiliar, origen, destino)


if __name__ == "__main__":
    pila_origen = Pila()
    pila_auxiliar = Pila()
    pila_destino = Pila()

    discos = 3
    for i in range(discos, 0, -1):
        pila_origen.apilar(i)

    print("Pasos a seguir para resolver el juego de las Torres de Hanoi:")
    hanoi(discos, pila_origen, pila_auxiliar, pila_destino)

def operar(pila, operadores):
    for i in range(len(pila) - 1):
        elemento = pila.pop()
        if elemento in operadores:
            if len(pila) < 2:
                raise ValueError("Error: falta un operando")
            operand2 = float(pila.pop())
            operand1 = float(pila.pop())
            resultado = operadores[elemento](operand1, operand2)
            pila.append(resultado)

def evaluar_expresion(expresion, operadores):
    pila = []
    tokens = expresion.split()
    for token in tokens:
        if token in operadores:
            operar(pila, operadores)
        else:
            pila.append(float(token))
    while len(pila) > 1:
        operar(pila, operadores)
    if len(pila) == 1:
        return pila.pop()
    else:
        raise ValueError("Error: la expresi칩n no est치 en notaci칩n posfija")

operadores = {
    '+': lambda x, y: x + y,
    '-': lambda x, y: x - y,
    '*': lambda x, y: x * y,
    '/': lambda x, y: x / y
}

expresion = "3 4 5 + *"
resultado = evaluar_expresion(expresion, operadores)
print("El resultado de la expresi칩n posfija ", expresion, " es: ", resultado)
